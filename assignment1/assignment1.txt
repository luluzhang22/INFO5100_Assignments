
Scenarios: 

1. Hiking
 1.1. Rent a ReachNow to drive to mountain rainier on weekends with friends
 1.2. On the way, fill the gas
 1.3. On the way, eat at restaurant for lunch
 1.4. Buy the ticket to get into the park
 1.5. Book a hotel or check in the hotel.

 Things:
	Vistor:
		Data: Name, PhoneNumber, DriverLicense, IsHungry,
		Behaviors: search, rent, drive, pickup, fillGas, eat, buyTicket, bookHotel, hike, checkIn

	Website:
		Data: URL, Product[] products, BankAccount
		Behaviors: search, sort, display, compare, placeTheOrder, reserve, book
	
	Car:
		Data: Price, Color, AvalibleTime, Location, Brand, CarType, AmountOfGas
		Behaviors: run, getGas
	
	Restaurant:
		Data: Address, Food[] food, Price, FoodType
		Behaviors: provideFood, placeTheOrder

	Park:
		Data: Address, Price
		Behaviors: sellTicket

	Hotel:
		Data: Address, Room[] rooms, 
		Behaviors: CheckIn, Clean
	
	Room:
		Data: RoomNumber, Type, Price, GuestsAmount,
		Behaviors:

	CreditCard:
		Data: Number, Name, Company, Expiry, SecurityCode,
		Behaviors: pay

	CreditCardCompany:
		Data: Name,
		Behaviors: authorizeTransaction
	

 Sequence of Flow:
	Hiker cassie, luna,
	Website ReachNow, Expedia, Yelp,
	Car mini,
	Park rainier,
	Hotel myHotel,
	Room myRoom,
	CreditCard card,
	CreditCardCompany visa,
	Confirmation rentInfo, bookInfo

	luna.findDesirableCarRentWebsite -> Collection of Website : Website
	(ReachNow = Website)
	if ReachNow != null
		ReachNow.searchForCar -> priceRange, brand, locationRange, rentPeriod : Collection of Car
		(mini = Car)
		luna.rentCar -> mini, card : Confirmation
		(rentInfo = Confirmation)
	else
		luna.cantRentCar

	luna.findDesirableHotelBookWebsite -> Collection of Website : Website
	(Expedia = Website)
	if Expedia != null
		Expedia.searchForHotel -> locationRange, priceRange : Collection of Hotel
		(myHotel = Hotel)
		Expedia.searchForRoom -> priceRange, guestAmount, CheckInTime, CheckOutTime : Collection of Room
		(myRoom = Room)
		luna.bookRoom -> myRoom, timeForCheckIn, creditCard : Confirmation
		(bookInfo = Confirmation)
	else
		luna.cantBookRoom

	Loop
		if park.getAddress == car.getLocation
			break
		mini.run -> park.getAddress
		if mini.getGas less than 30%
			luna.fillGas -> gasStation, creditCard
		if luna.isHungry or cassie.isHungry
			luna.eat -> restaurant : food
			luna.eat -> restaurant : food
	End

	luna.buyTicket -> card, amountOfTicket : tickets
	luna.hike
	cassie.hike
	luna.checkIn -> Hotel, bookInfo : Confirmation



2. Organise a career fair(Suppose you are the organizer)
 2.1. Contact with school to reserve the hall for the career fair.
 2.2. Invite companies to participate in the career fair.
 2.3. Post information of this career fair on the school website.
 2.4. Send emails to students to let them register for the career fair.
 2.5. Set up booths at the venue.

 Things:
	Organizer:
		Data: Name, Phone number, 
		Behaviors: contact, reserve, postInformation, sendEmail, arrangeVenue,
	
	School:
		Data: Address, Name, Hall[] halls,
		Behaviors: provideVenue

	Venue:
		Data: Address, Size, Layout, booths
		Behaviors: 
	
	Company,
		Data: Name, Type, WantedPosition, PhoneNumber,
		Behaviors: attend, interview
	
	Information:
		Data: Venue, StartTime, EndTime, Companies	
	
	Website:
		Data: URL, Information
		Behaviors: display, register
	
	EmailService:
		Data: emailAddress, content
		Behaviors: sentEmail, authorize

	Students:
		Data: Name, Major, emailAddress
		Behaviors: registerForFair, attend, getEmail, getOffer
	

 Sequence of Flow:
	Organizer luna,
	Venue hall,
	Company[] companies,
	Information info,
	Website myNEU,
	EmailService gmail,
	Students stu,
	Confirmation venueInfo,

	luna.contactWithSchool -> time, sizeOfVenue, school : Collection of venue
	(hall = venue)
	if hall != null
		luna.reserveVenue -> hall : Confirmation
		(venueInfo = Confirmation)
	else
		luna.cantFindVenue

	luna.contactWithCompanies -> Collection of PhoneNumber, time : Collection of Company
	(companies = Collection of Company)

	if (venueInfo is true and companies != null)
		luna.postInformation -> venueInfo, companies, website : Information
		(info = Information)
		luna.loginToEmailService -> gmail : authorize
		luna.sendEmail -> students.emailAddress, info : sent
		(stu = student)

		stu.registerForFair : registered
		luna.arrangeVenue -> booths : ready
		if ready is true
			loop
				if time > info.EndTime
					break
				companies.attend
				stu.attend
				stu.findDesirablePosition -> companies : company
				company.interview -> stu, question : got
				if got is true
					stu.getOffer
			end
	else
		luna.cantOrganizeFair
	

3. Order Pizza from Pizza Hut
 3.1. Find a nearby Pizza Hut online.
 3.2. Call the Pizza Hut to order pizza.
 3.3. Choose deliver or pick up the pizza.
 3.4. Pay for the pizza with cash.

 Things:
	Customer:
		Data: Address, Name, PhoneNumber,
		Behaviors: search, makeCall, speak, choosePizza, makeOrder, endCall, purchase, drive
	
	PizzaHut:
		Data: Address, PhoneNumber, Pizza[] pizzas, Website
		Behaviors: receiveCall, showPizzas, deliver, placeTheOrder, 
	
	Pizza:
		Data: Size, Price, Specialty
		Behaviors:
	
	PhoneService:
		Data: PhoneNumber, name
		Behaviors: connect

 Sequence of Flow:
	Customer luna,
	PizzaHut hut,
	Pizza piz,
	PhoneService ATT,
	
	luna.findNearbyPizzaHut -> address, Website of PizzaHut : Collection of PizzaHut
	(hut = PizzaHut)
	if hut == null
		luna.cantFindAPizzaHut
	else
		Loop 
			luna.makeCall -> hut.phoneNumber, phoneService : connected
			if connected is true
				break
		End
		
		Loop
			hut.showPizzas -> phoneService, luna, pizzas.Information : Collection of Pizza
			(piz = Pizza)
			luna.choosePizza -> phoneService, hut, piz : confirmation
			if confirmation is true
				break
		End

		luna.makeOrder -> phoneService, hut, piz : method
		luna.endCall
		if method == delivery
			hut.deliver -> piz, address, price : delivered
			if delivered is true
				luna.purchase
		else if method == pick-up
			luna.driveToPizzaHut -> address, confirmation : arrival
			if arrival is true
				luna.purchase
			
	
	
	
 
4. Design a code sharing platform (eg: Github).
 4.1. Find out some useful code sharing platform.
 4.2. Sum up essential factors(such as : users, repository, command â€¦) of a good code sharing platform.
 4.3. Confirm users and requirements of this platform.
 4.4. Design database and pages.

 Things:
	Platform:
		Data: Name, URL
		Behaviors: 
			authorize -> userName, password :
				user = Users.getUser(userName)
				if user == null
					Platform.cantFineUser
					return false
				else if user.Password == password
					return true
				else
					Platform.wrongPassword
					return false

			display -> user : repositories

	Users:
		Data: UserName, Password, IsLogin, Repository,
		Behaviors: 
			getUser -> userName : user

			signIn -> userName, password:
				result = Platform.authorize(userName, password)
				if result == true
					user.isLogin == true
				else
					user.wrongNameOrPassword

			signUp -> userName, password:
				Loop
					user = Platform.getUser(userName)
					if user != null
						user.reEnterUserName
					else
						Users.add(user)
						break
				End
			
			logout -> userName :
				user = Users.getUser
				user.IsLogin = false

			addRepository -> name, type, introduce, user :
				repository.addRep(repository)
			
			manage -> commandLine:
				if commandLine == pull
					user.getUpToDateRepository
				if commandLine == push
					repository.compare(oldVersion, newVersion)
					user.updateRepository
			
	Repository:
		Data: Name, Type, Content, Branch, User
		Behaviors:
			addContent -> files : added
			
			updateContent -> files : updated
	
			addBranch -> name, user:
				Branch.add(branch)

			compare -> oldVersion, newVersion: 
				display the difference between oldVersion and newVersion
				
			

5. Design a soft-drink/snacks vending machine.
 5.1. Verify the kinds and amount of goods.
 5.2. Verify the price of each kind.
 5.3. Design functions for the machine, for example: calculating, adding goods and outputting goods.

	machine: 
		Data: Goods[] goods, Balance, Receive, Give
		Behaviors: 
			addGoods -> good : goods.add(good)
			display : Collection of goods(display price, amount and name)
			chooseGood -> name : good
			receiveMoney -> cash :
				receive += cash
			outputGoods -> good, money
			buyGood :
				good = chooseGood()
				if good == null
					machine.soldOutOfGood
				else
					price = good.price
					Loop
						receive = receiveMoney(cash)
						if receive > price
							break
						else
							machine.dontGetEnoughMoney
					End
					Give = receive - price
					Balance -= Give
					if Balance >= 0
						outputGoods (good, Give)
					else
						machine.dontHaveEnoughMoney
			

	Goods:
		Data: name, price, amount, 
		Behaviors:

